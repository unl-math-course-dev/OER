<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec-graph-euler">

	<title>Euler Circuits and the Chinese Postman Problem</title>

<p>
In <xref ref="eg-k-berg"/>, we created a graph of the Königsberg bridges and asked whether it was possible to walk across every bridge once.  Because Euler first studied this question, these types of paths are named after him.
</p>

<assemblage>
	<title>Euler paths and Euler circuits</title>
		<p><ul>
			<li>An <term>Euler path</term> is a type of path that uses every edge in a graph with no repeats.  Being a path, it does not have to return to the starting vertex.</li>
			<li>An <term>Euler circuit</term> is a type of circuit that uses every edge in a graph with no repeats.  Being a circuit, it must start and end at the same vertex.</li>
		</ul></p>
</assemblage>

<example xml:id="eg-euler-path">
	<p>
		In the graph shown below, there are several Euler paths.  One such path is CABDCB.  The path is shown in arrows to the right, with the order of edges numbered.
	</p>
	<figure xml:id="pic-euler-path"><caption></caption>
	<sidebyside widths="35% 35%">
	<image source="images/pic-euler-path1.png"/>
	<image source="images/pic-euler-path2.png"/>
	</sidebyside>
	</figure>
</example>

<example xml:id="eg-euler-circuit">
	<p>
		The graph below has several possible Euler circuits.  Here are a couple, starting and ending at vertex A:  ADEACEFCBA and AECABCFEDA.  The second is shown in arrows.
	</p>
	<figure xml:id="pic-euler-circuit"><caption></caption>
	<sidebyside widths="35% 35%">
	<image source="images/pic-euler-circuit1.png"/>
	<image source="images/pic-euler-circuit2.png"/>
	</sidebyside>
	</figure>
</example>

<p>
	Look back at <xref ref="eg-euler-path"/>, which showed a graph that had an Euler path. Does that graph have an Euler circuit?  A few tries will tell you no; that graph does not have an Euler circuit.
	<!--When we were working with shortest paths, we were interested in the optimal path.  With Euler paths and circuits, we're primarily interested in whether an Euler path or circuit exists.-->
</p>

<p>
	Why do we care if an Euler circuit exists?  Think back to <xref ref="eg-graph-intro-nhood"/> from the beginning of the chapter.  The lawn inspector is interested in walking as little as possible.  The ideal situation would be a circuit that covers every street with no repeats.  That's an Euler circuit!  Luckily, Euler solved the question of whether or not an Euler path or circuit will exist.
</p>

<assemblage>
	<title>Euler's Path and Circuit Theorems</title>
	<p><ul>
		<li>A graph in which all vertices have even degree (that is, there are no odd vertices) will contain an Euler circuit.</li>
		<li>A graph with exactly two vertices of odd degree will contain an Euler path, but not an Euler circuit.</li>
		<li>A graph with any number of odd vertices other than zero or two will not have any Euler path.</li>
	</ul></p>
</assemblage>

<example>
<p>
	In the graph below, vertices A and C have degree 4, since there are 4 edges leading into each vertex.  B is degree 2, D is degree 3, and E is degree 1.  This graph contains two vertices with odd degree (D and E) and three vertices with even degree (A, B, and C), so Euler's theorems tell us this graph has an Euler path, but not an Euler circuit.
</p>
<sidebyside width="60%">
<image source="images/pic-euler-path3.png"/>
</sidebyside>
</example>

<example xml:id="eg-nhood-revisited">
<p>
	Is there an Euler circuit on the housing development lawn inspector graph we created in <xref ref="eg-graph-intro-nhood"/>?  All the highlighted vertices have odd degree.  Since there are more than two vertices with odd degree, there are no Euler paths or Euler circuits on this graph.  Unfortunately our lawn inspector will need to do some backtracking.
</p>
<sidebyside widths="35% 35%">
<image source="images/pic-euler-path4a.png"/>
<image source="images/pic-euler-path4b.png"/>
</sidebyside>
</example>

<example>
<p>
	When it snows in the same housing development, the snowplow has to plow both sides of every street.  For simplicity, we'll assume the plow is out early enough that it can ignore traffic laws and drive down either side of the street in either direction.  This can be visualized in the graph by drawing two edges for each street, representing the two sides of the street.
</p>
<sidebyside width="60%">
<image source="images/pic-euler-path5.png"/>
</sidebyside>
<p>
	Notice that every vertex in this graph has even degree, so this graph does have an Euler circuit.
</p>
</example>

<p>
	Now we know how to determine if a graph has an Euler circuit, but if it does, how do we find one?  While it usually is possible to find an Euler circuit just by pulling out your pencil and trying to find one, the more formal method is <term>Fleury's algorithm</term>.
</p>

<assemblage>
	<title>Fleury's Algorithm</title>
	<p><ol>
		<li>Start at any vertex if finding an Euler circuit.  If finding an Euler path, start at one of the two vertices with odd degree.</li>
		<li>Choose any edge leaving your current vertex, provided deleting that edge will not separate the graph into two disconnected sets of edges.</li>
		<li>Add that edge to your circuit, and delete it from the graph.</li>
		<li>Continue until you're done.</li>
	</ol></p>
</assemblage>

<example>
<p>
	Let’s find an Euler Circuit on this graph using Fleury's algorithm, starting at vertex A.
</p>
<sidebyside>
<image source="images/pic-fleury.png"/>
</sidebyside>
</example>

<exploration>
<statement>
	<p>Does the graph below have an Euler Circuit?  If so, find one.</p>
	<sidebyside width="60%">
	<image source="images/pic-ex-euler1.png"/>
	</sidebyside>
</statement>
<solution>
	<p>Yes, all vertices have even degree so this graph has an Euler circuit.  There are several possibilities.  One is:  ABEGFCDFEDBCA</p>
</solution>
</exploration>

<p>
	Not every graph has an Euler path or circuit, yet our lawn inspector still needs to do her inspections.  Her goal is to minimize the amount of walking she has to do.  In order to do that, she will have to duplicate some edges in the graph until an Euler circuit exists.
</p>

<assemblage>
	<title>Eulerization</title>
	<p>
		<term>Eulerization</term> is the process of adding edges to a graph to create an Euler circuit on a graph.  To eulerize a graph, edges are duplicated to connect pairs of vertices with odd degree.  Connecting two odd degree vertices increases the degree of each, giving them both even degree.  When two odd degree vertices are not directly connected, we can duplicate all edges in a path connecting the two.
	</p>
</assemblage>

<p>
	Note that we can only duplicate edges, not create edges where there wasn't one before.  Duplicating edges would mean walking or driving down a road twice, while creating an edge where there wasn't one before is akin to installing a new road!
</p>

<example>
	<p>
		For the rectangular graph shown, three possible eulerizations are shown.  Notice in each of these cases the vertices that started with odd degrees have even degrees after eulerization, allowing for an Euler circuit.
	</p>
	<figure><caption></caption>
		<image width="70%" source="images/eulerization0.png"/>
		<image width="70%" source="images/eulerization1.png"/>
		<image width="70%" source="images/eulerization2.png"/>
		<image width="70%" source="images/eulerization3.png"/>
	</figure>
</example>

<p>
	In the example above, you'll notice that the last eulerization required duplicating seven edges, while the first two only required duplicating five edges.  If we were eulerizing the graph to find a walking path, we would want the eulerization with minimal duplications.  If the edges had weights representing distances or costs, then we would want to select the eulerization with the minimal total added weight.
</p>

<exploration>
	<statement>
		<sidebyside>
			<p>Eulerize the graph shown, then find an Euler circuit
on the eulerized graph.</p>
			<image source="images/eulerization4.png"/>
		</sidebyside>
	</statement>
	<solution>
		<sidebyside>
			<p>This graph can be eulerized by duplicating the edge BC, as shown.  One possible Euler circuit on the eulerized graph is ACDBCBA</p>
			<image source="images/eulerization4sol.png"/>
		</sidebyside>
	</solution>
</exploration>

<example>
	<p>
		Looking again at the graph for our lawn inspector from <xref ref="eg-graph-intro-nhood"/> and <xref ref="eg-nhood-revisited"/>, the vertices with odd degree are shown highlighted.  With eight vertices, we will always have to duplicate at least four edges.  In this case, we need to duplicate five edges since two odd degree vertices are not directly connected.  Without weights we can't be certain this is the eulerization that minimizes walking distance, but it looks pretty good.
	</p>
	<sidebyside widths="35% 35%">
		<image source="images/eulerization5.png"/>
		<image source="images/eulerization5sol.png"/>
	</sidebyside>
</example>

<p>
	The problem of finding the optimal eulerization is called the Chinese Postman Problem, a name given by an American in honor of the Chinese mathematician Meigu Guan<fn>Also sometimes romanized as Mei-Ko Kwan.</fn> who first studied the problem in 1962 while trying to find optimal delivery routes for postal carriers.   This problem is important in determining efficient routes for garbage trucks, school buses, parking meter checkers, street sweepers, and more.
</p>

<p>
	Unfortunately, algorithms to solve this problem are fairly complex.  Some simpler cases are considered in the exercises.
</p>


</section>
