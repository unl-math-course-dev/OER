<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec-graph-bipartite">

<title>Bipartite Graphs and Stable Matchings</title>



<subsection><title>Bipartite Graphs</title>

	<!--	definition and motivation
		recognize abstract graphs as bipartite or not
		recognize verbal descriptions of real-world graphs as bipartite or not -->

	<p>Most of the real-world graphs we've seen so far have vertices representing a single type of object, and edges representing a symmetric relationship that the vertices can have with each other.  For example, in a graph of people and friendships, the vertices are all people, and each edge represents a friendship, where if Amy is a friend of Tom, then Tom is also a friend of Amy.  Or in a graph of the streets in a neighborhood, the vertices are all intersections and the edges are connections between them, where if intersection A is connected to intersection B by a street, then intersection B is connnected to intersection A by the same street.</p>

	<p>However, there are also many situations where we might want to consider  multiple types of objects as vertices, with edges representing asymmetric relationships between two vertices of different types.  For example, consider the graph where each vertex is either a house or a person, and two vertices are connected by an edge if one of them is an owner of the other.  Amy owns her house, so there is an edge between them, but her house does not own her!  This is an example of a <term>bipartite graph</term>.</p>

	<assemblage><title>Bipartite Graphs</title>

		<p>A <term>bipartite graph</term> is a graph in which the vertices can be divided into two parts, with no edges between vertices from the same part.</p>

		<p>We will often draw bipartite graphs with the two parts being top and bottom, or left and right, as shown here:</p>

		<image source="images/bipartite-exemplar.png"/>

	</assemblage>

	<p>Of course, not all bipartite graphs need to <i>look</i> bipartite, with the different parts grouped in different areas of the drawing.  For example, consider this graph:</p>

	<image source="images/bipartite-tricky.png"/>

	<p>At first glance, it isn't clear how to group the vertices into two distinct parts, with no edges connecting vertices from the same part.  However, if we color the vertices, as below, we can see that no two blue vertices are connected, and no two red vertices are connected.  So the blue collection and red collection make up the two parts, demonstrating that this graph is bipartite.</p>

	<image source="images/bipartite-tricky-colored.png"/>

	<p>We can also move some of the vertices around to make the two parts more obviously distinct, like this:</p>

	<image source="images/bipartite-tricky-colored-moved.png"/>

	<aside>
		<p>There is actually a neat trick to tell if a graph is bipartite or not.  If a graph has a circuit whose length is odd (for example, a triangle), then it cannot be bipartite.  However, if all the circuits are even, then the graph is bipartite.  Can you figure out why this is true?</p>
	</aside>

</subsection>



<subsection><title>Matchings</title>

	<!--	define matching and perfect matching
		introduce notation for matchings
		provide motivation for definitions
		recognize what is and is not a matching/perfect matching in an abstract graph
		recognize what matching/perfect matching mean in context of real-world graphs -->

	<p>Oftentimes, bipartite graphs are useful to consider because we want to find a way to pair vertices from one part with vertices from another part.  For example, we might have a number of job openings, and we want to give each job to a person who is qualified for it.  We might consider the bipartite graph where vertices are jobs and people, and an edge connects a job and a person whenever that person is qualified for that job.  For example, the graph might look like this:</p>

	<image source="images/people-jobs-graph.png"/>

	<p>Let's assume that each person can only work one job, and each job should be given to only one person.  Then a way to fill all of the job openings corresponds to a particular collection of edges, each edge pairing one person with one job.  For example, we might fill the jobs by picking all of the blue edges below.  Each job is given to the person connected to it by a blue edge.</p>

	<image source="images/people-jobs-matching.png"/>

	<p>Notice that no vertex is on two different blue edges, since that would either correspond to a job that is given to two different people, or a person who is given two different jobs (both of which we're assuming shouldn't happen).  A collection of edges that satisfies this property is called a <term>matching</term>.</p>

	<assemblage><title>Matchings</title>

		<p>A <term>matching</term> is a collection of edges where no two edges share a vertex.  We will notate matchings by listing their edges.</p>

		<p>A <term>perfect matching</term> is a matching where every vertex in the graph is included in some edge from the matching.</p>

	</assemblage>

</subsection>



<subsection><title>Stable Matchings</title>

	<!--	define preference-labeled and stable matching
		introduce how we will denote the preferences in pictures
		provide motivation for definitions
		define Gale-Shapley algorithm
		give some reasoning about why it always produces a stable matching, and why the proposers always get the better deal
		do many examples of algorithm -->
		
		
		

</subsection>

</section>
