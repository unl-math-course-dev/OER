<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec-graph-bipartite">

<title>Bipartite Graphs and Stable Matchings</title>



<subsection><title>Bipartite Graphs</title>

	<!--	definition and motivation
		recognize abstract graphs as bipartite or not
		recognize verbal descriptions of real-world graphs as bipartite or not -->

	<p>Most of the real-world graphs we've seen so far have vertices representing a single type of object, and edges representing a symmetric relationship that the vertices can have with each other.  For example, in a graph of people and friendships, the vertices are all people, and each edge represents a friendship, where if Amy is a friend of Tom, then Tom is also a friend of Amy.  Or in a graph of the streets in a neighborhood, the vertices are all intersections and the edges are connections between them, where if intersection A is connected to intersection B by a street, then intersection B is connnected to intersection A by the same street.</p>

	<p>However, there are also many situations where we might want to consider  multiple types of objects as vertices, with edges representing asymmetric relationships between two vertices of different types.  For example, consider the graph where each vertex is either a house or a person, and two vertices are connected by an edge if one of them is an owner of the other.  Amy owns her house, so there is an edge between them, but her house does not own her!  This is an example of a <term>bipartite graph</term>.</p>

	<assemblage><title>Bipartite Graphs</title>

		<p>A <term>bipartite graph</term> is a graph in which the vertices can be divided into two parts, with no edges between vertices from the same part.</p>

		<p>We will often draw bipartite graphs with the two parts being top and bottom, or left and right, as shown here:</p>

		<image source="images/bipartite-exemplar.png"/>

	</assemblage>

	

</subsection>



<subsection><title>Matchings</title>

	<!--	define matching and perfect matching
		introduce notation for matchings
		provide motivation for definitions
		recognize what is and is not a matching/perfect matching in an abstract graph
		recognize what matching/perfect matching mean in context of real-world graphs -->

</subsection>



<subsection><title>Stable Matchings</title>

	<!--	define preference-labeled and stable matching
		introduce how we will denote the preferences in pictures
		provide motivation for definitions
		define Gale-Shapley algorithm
		give some reasoning about why it always produces a stable matching, and why the proposers always get the better deal
		do many examples of algorithm -->
		
		
		

</subsection>

</section>
